import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Stream;


public class main {
	public static class Container{
		public String name = "";
		public int val = 0;
		public  String reg = "";
		public  boolean number = false;
		public Container(String name_, int val_, String reg_,boolean number_){
			name = name_;
			val = val_;
			reg = reg_;
			number = number_;
		}
		public Container(){}
	}
	public static ArrayList<Container> variables = new ArrayList();
	public static int counter = 0;
	
	public static int pri(String c){
		if (c.equals("*") || c.equals("/"))
			return 1;
		else if (c.equals("+") || c.equals("-"))
			return 2;	
		else
			return 3;
	}
	public static ArrayList<String> infToPos(String[] str){
		ArrayList<String> res = new ArrayList<>();
		Stack<String> stk = new Stack<>();
		for (int i = 0; i < str.length; i++) {
			if (str[i].equals("+") || str[i].equals("-") || str[i].equals("*") || str[i].equals("/")) {
				while(!stk.isEmpty() && pri(stk.peek()) <= pri(str[i])){
					res.add(stk.pop());
				}
				stk.push(str[i]);
			}
			else if(str[i].equals("(")){
				stk.push(str[i]);
			}
			else if(str[i].equals(")")){
				while(!stk.peek().equals("(")){
					res.add(stk.pop());
				}
				stk.pop();
			}
			else{
				res.add(str[i]);
			}
		}
		while(!stk.isEmpty()){
			res.add(stk.pop());
		}
		return res;
	}

	public static Container findC(String s){
		if(!ContainsVar(s)){
			Container x = new Container(s, 0,  s, false);
			return x;
		}
		for (int i = 0; i < variables.size(); i++) {
			if(variables.get(i).name.equals(s)){
				return variables.get(i);
			}
		}
		Container x = new Container("number", Integer.parseInt(s),  s, true);
		return x;
	}
	
	public static boolean isSign(String s){
		if(s.equals("+") || s.equals("-") || s.equals("/") || s.equals("*")){
			return true;
		}
		else{
			return false;
		}		
	}

	
	public static Container evaluate(ArrayList<String> exp){
		Stack<Container> stk = new Stack<>();
		for (int i = 0; i < exp.size(); i++) {
			if(!isSign(exp.get(i))){
				stk.push(findC(exp.get(i)));
			}
			else{
				counter++;	
				String oper = exp.get(i);
				Container first = stk.pop();
				Container second = stk.pop();
				if(oper.equals("+")){
					String name = "" + counter;
					Container result = new Container(name, first.val + second.val, name, false);
					stk.push(result);
					String message = "%" + result.name + " = add i32 ";
					message = first.number ? message + first.reg : message + "%" + first.reg;
					message = message + ",";
					message = second.number ? message + second.reg : message + "%" + second.reg;
					System.out.println(message);
				 }
				else if(oper.equals("*")){
					String name = "" + counter;
					Container result = new Container(name, first.val * second.val, name, false);
					stk.push(result);
					String message = "%" + result.name + " = mul i32 ";
					message = first.number ? message + first.reg : message + "%" + first.reg;
					message = message + ",";
					message = second.number ? message + second.reg : message + "%" + second.reg;
					System.out.println(message);
				 }
				else if(oper.equals("/")){
					String name = "" + counter;
					Container result = new Container(name, second.val / first.val , name, false);
					stk.push(result);
					String message = "%" + result.name + " = udiv i32 ";
					message = first.number ? message + first.reg : message + "%" + first.reg;
					message = message + ",";
					message = second.number ? message + second.reg : message + "%" + second.reg;
					System.out.println(message);
				 }
				else if(oper.equals("-")){
					String name = "" + counter;
					Container result = new Container(name, second.val - first.val, name, false);
					stk.push(result);
					String message = "%" + result.name + " = sub i32 ";
					message = first.number ? message + first.reg : message + "%" + first.reg;
					message = message + ",";
					message = second.number ? message + second.reg : message + "%" + second.reg;
					System.out.println(message);
				 }
			}
		}
		return stk.pop();
	}
	
	public static boolean ContainsVar(String x){
		for (int i = 0; i < variables.size(); i++) {
			if(variables.get(i).name.equals(x)){
				return true;
			}
		}
		return false;
	}
	
	public static void main(String[] args) throws FileNotFoundException {
		Scanner input = new Scanner(new File("file.stm"));
		while(input.hasNextLine()){
			String str = input.nextLine();
			//if '=' exist
			int x = str.indexOf('=');
			//Whether query contains = sign or not. Nice...
			String str_;String var;
			if(x != -1){
				str_ = str.split("=")[1];
				var = str.split("=")[0];
				if(!ContainsVar(var)){
					variables.add(new Container(var, 0, var, false));
				}				
			}
			else{str_ = str;}
			String[] parts = str_.split("(?<=[^\\.a-zA-Z\\d])|(?=[^\\.a-zA-Z\\d])");
			System.out.println(Arrays.toString(parts));
			ArrayList<String> s = infToPos(parts);
			while(s.contains(" ")){s.remove(" ");}//This is for white spaces.
			System.out.println(s);
			System.out.println(evaluate(s).val);//Best fucking function in the universe xd
		}
		
	}
}
